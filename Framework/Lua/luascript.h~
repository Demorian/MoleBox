/*
    Copyright (c) 2012 Paul Brown <email>

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
*/


#ifndef LUASCRIPT_H
#define LUASCRIPT_H

#include "LuaScriptHelper.h"
#include "luascripts.h"

#ifndef LUA_SFML_API
#define LUA_SFML_API

#ifdef LUA_EDITOR
template <int T> static int voidLuaEmptyFunction(lua_State *L) {
  
  int n = lua_gettop(L);
  
  if ( n != T)
  {
    std::string error;
    error = "Incorrect number of arguments, this function takes ";
    error =+ T;
    error =+ ".";
    lua_pushstring(L,error.c_str());
    lua_error(L);
  }
  
}

static const luaL_reg sprite_DUMMY[] =
{
  { "Load", voidLuaEmptyFunction<2> },
  { "Draw", voidLuaEmptyFunction<1> },
  { "Move", voidLuaEmptyFunction<2> },
  { "SetPosition", voidLuaEmptyFunction<2> },
  { NULL, NULL }
};

static const luaL_Reg sound_DUMMY[] =
{
  { "Load", voidLuaEmptyFunction<1>},
  { "Play", voidLuaEmptyFunction<1>},
  { NULL, NULL }
};

#endif

static const luaL_reg sprite[] =
{
  { "Load", MB_Lua::Sprites::Load},
  { "Draw", MB_Lua::Sprites::Draw},
  { "Move", MB_Lua::Sprites::Move},
  { "SetPosition", MB_Lua::Sprites::SetPosition},
  { NULL, NULL }
};

static const luaL_Reg sound[] =
{
  { "Load", MB_Lua::Sounds::Load},
  { "Play", MB_Lua::Sounds::Play},
  
  { NULL, NULL }
};
#endif
  
class LuaScript
{
private:
  lua_State *L;
  bool debug;
public:
    LuaScript(bool debug = false);
    bool LoadFromFile(std::string file);
    bool LoadFromString(std::string contents, std::string remarks = "");
    bool HandleError(int State);
    void RegisterComponentFunctions();
    void RegisterDummyComponentFuncs();
    bool RunFunction(std::string name);
    bool LookForFunction( std::string name );
    lua_State* GetState();
    virtual ~LuaScript();

};

#endif // LUASCRIPT_H
